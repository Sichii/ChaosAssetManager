using System.Collections.Immutable;
using Chaos.Extensions.Common;
using ChaosAssetManager.ViewModel;

namespace ChaosAssetManager.Definitions;

public static class CONSTANTS
{
    public const string NEW_MAP_NAME = "New";

    public static readonly ImmutableArray<StructureViewModel> FOREGROUND_STRUCTURES;
    public static readonly ImmutableArray<StructureViewModel> BACKGROUND_STRUCTURES;

    static CONSTANTS()
    {
        // @formatter:wrap_arguments_style chop_always
        // @formatter:keep_existing_initializer_arrangement true

        #region Foreground Structures
        var fgStructures = new List<StructureViewModel>();

        // (,),

        //    *
        // *  l  *
        //    *
        // NAME: l 1x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 0 }
                },
                ranges:
                [
                    (5404, 5404),
                    (5406, 5406),
                    (5408, 5408),
                    (5410, 5410),

                    //10k+
                    (10269, 10269),
                    (10310, 10310),
                    (10335, 10335),
                    (10619, 10619)
                ]));

        //    *
        // *  r  *
        //    *
        // NAME: r 1x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 }
                },
                rfgPattern: new[,]
                {
                    { 1 }
                },
                ranges:
                [
                    (5405, 5405),
                    (5407, 5407),
                    (5409, 5409),
                    (5411, 5411),

                    //10k+
                    (10269, 10269),
                    (10310, 10310),
                    (10335, 10335),
                    (10619, 10619)
                ]));

        //    *
        // * l r *
        //    *
        // NAME: SINGLE TILE
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 2 }
                },
                ranges:
                [
                    (73, 394),
                    (396, 407),
                    (409, 676),
                    (678, 725),
                    (727, 740),
                    (745, 786),
                    (3242, 3249),
                    (3307, 3370),
                    (3372, 3427),
                    (3429, 3578),
                    (3580, 3715),
                    (3722, 3723),
                    (3781, 3788),
                    (3801, 3808),
                    (3825, 3836),
                    (3838, 3911),
                    (3927, 4000),
                    (4003, 4042),
                    (4083, 4124),
                    (4229, 4236),
                    (4253, 4260),
                    (4269, 4270),
                    (4320, 4339),
                    (4415, 4418),
                    (4421, 4430),
                    (4467, 4480),
                    (4483, 4486),
                    (4583, 4616),
                    (4665, 4682),
                    (4709, 4714),
                    (4811, 4820),
                    (4855, 4856),
                    (4876, 5057),
                    (5226, 5231),
                    (5233, 5236),
                    (5255, 5260),
                    (5267, 5272),
                    (5332, 5337),
                    (5358, 5363),
                    (5372, 5375),
                    (5384, 5389),
                    (5398, 5411),
                    (5420, 5425),
                    (5428, 5429),
                    (5432, 5433),
                    (5442, 5447),
                    (5450, 5451),
                    (5454, 5455),
                    (5464, 5469),
                    (5472, 5473),
                    (5476, 5477),

                    //10k+
                    (10013, 10018),
                    (10146, 10153),
                    (10168, 10183),
                    (10196, 10197),
                    (10210, 10213),
                    (10253, 10268),
                    (10270, 10309),
                    (10311, 10334),
                    (10336, 10399),
                    (10421, 10482),
                    (10605, 10618),
                    (10670, 10687),

                    //20k+
                    //(24213, 24244)
                ]));

        //    *
        // *  l  *
        //    *  l  *
        //       *
        // NAME: ll 2x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0 }
                },
                ranges:
                [
                    (4725, 4726),
                    (4763, 4768),
                    (5324, 5327),
                    (5350, 5353),
                    (5376, 5379),
                    (5390, 5393),
                    (5412, 5415),
                    (5426, 5427),
                    (5434, 5437),
                    (5448, 5449),
                    (5456, 5459),
                    (5470, 5471)
                ]));

        //    *
        // *  l  *
        //    * l r *
        //       *
        // NAME: llr 2x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2 }
                },
                rfgPattern: new[,]
                {
                    { 0, 3 }
                },
                ranges:
                [
                    (787, 792),
                    (799, 804),
                    (811, 819),
                    (829, 855),
                    (883, 885),
                    (889, 897),
                    (907, 909),
                    (913, 918),
                    (925, 927),
                    (931, 948),
                    (970, 990),
                    (1012, 1014),
                    (1018, 1023),
                    (1030, 1032),
                    (1036, 1041),
                    (1066, 1119),
                    (1156, 1164),
                    (1174, 1182),
                    (1192, 1197),
                    (1204, 1212),
                    (1219, 1221),
                    (1225, 1257),
                    (1267, 1269),
                    (1273, 1287),
                    (1297, 1323),
                    (1351, 1359),
                    (1369, 1371),
                    (1375, 1380),
                    (1387, 1404),
                    (1423, 1425),
                    (1429, 1437),
                    (1447, 1452),
                    (1459, 1473),
                    (1489, 1515),
                    (1543, 1569),
                    (1597, 1605),
                    (1615, 1623),
                    (1633, 1641),
                    (1651, 1677),
                    (1705, 1710),
                    (1717, 1725),
                    (1735, 1737),
                    (1741, 1749),
                    (1759, 1767),
                    (1777, 1779),
                    (1783, 1791),
                    (1801, 1806),
                    (1813, 1815),
                    (1819, 1833),
                    (1849, 1857),
                    (1867, 1872),
                    (1879, 1884),
                    (1891, 1896),
                    (1903, 1911),
                    (1921, 1929),
                    (1939, 1947),
                    (1957, 1959),
                    (1963, 1965),
                    (1969, 1971),
                    (1975, 1983),
                    (1993, 1998),
                    (2005, 2010),
                    (2017, 2019),
                    (2023, 2025),
                    (2029, 2031),
                    (2035, 2037),
                    (2041, 2043),
                    (2056, 2058),
                    (2062, 2067),
                    (2119, 2121),
                    (2128, 2130),
                    (3277, 3279),
                    (3798, 3800),
                    (3816, 3824),
                    (3912, 3926),
                    (4047, 4049),
                    (4053, 4055),
                    (4068, 4070),
                    (4249, 4251),
                    (4265, 4267),
                    (4271, 4273),
                    (4277, 4279),
                    (4434, 4442),
                    (4573, 4575),
                    (4718, 4720),
                    (4749, 4751),
                    (4772, 4774),
                    (4778, 4780),
                    (4784, 4786),
                    (4873, 4875),

                    //10k+
                    (10140, 10142),
                    (10400, 10405),
                    (10412, 10414),
                    (10418, 10420),
                    (10568, 10570)
                ]));

        //       *
        //    *  r  *
        // *  r  *
        //    *
        // NAME: lrr 1x2
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 }
                },
                rfgPattern: new[,]
                {
                    { 2 },
                    { 1 }
                },
                ranges:
                [
                    (5328, 5331),
                    (5354, 5357),
                    (5380, 5383),
                    (5394, 5397),
                    (5416, 5419),
                    (5430, 5431),
                    (5438, 5441),
                    (5452, 5453),
                    (5460, 5463),
                    (5474, 5475)
                ]));

        //       *
        //    *  r  *
        // * l r *
        //    *
        // NAME: lrr 1x2
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 3 },
                    { 2 }
                },
                ranges:
                [
                    (793, 798),
                    (805, 810),
                    (820, 828),
                    (856, 882),
                    (898, 906),
                    (910, 912),
                    (919, 924),
                    (928, 930),
                    (949, 969),
                    (991, 1011),
                    (991, 1011),
                    (1015, 1017),
                    (1024, 1029),
                    (1033, 1035),
                    (1042, 1065),
                    (1120, 1155),
                    (1165, 1173),
                    (1183, 1191),
                    (1198, 1203),
                    (1213, 1218),
                    (1222, 1224),
                    (1258, 1266),
                    (1270, 1272),
                    (1288, 1296),
                    (1324, 1350),
                    (1360, 1368),
                    (1372, 1374),
                    (1381, 1386),
                    (1405, 1422),
                    (1426, 1428),
                    (1438, 1446),
                    (1453, 1458),
                    (1474, 1488),
                    (1516, 1542),
                    (1570, 1596),
                    (1606, 1614),
                    (1624, 1632),
                    (1642, 1650),
                    (1678, 1704),
                    (1711, 1716),
                    (1726, 1734),
                    (1738, 1740),
                    (1750, 1758),
                    (1768, 1776),
                    (1780, 1782),
                    (1792, 1800),
                    (1807, 1812),
                    (1816, 1818),
                    (1834, 1848),
                    (1858, 1866),
                    (1873, 1878),
                    (1885, 1890),
                    (1897, 1902),
                    (1912, 1920),
                    (1930, 1938),
                    (1948, 1956),
                    (1960, 1962),
                    (1966, 1968),
                    (1972, 1974),
                    (1984, 1992),
                    (1999, 2004),
                    (2011, 2016),
                    (2020, 2022),
                    (2026, 2028),
                    (2032, 2034),
                    (2038, 2040),
                    (2044, 2055),
                    (2059, 2061),
                    (2068, 2118),
                    (2122, 2127),
                    (3268, 3276),
                    (3280, 3282),
                    (4043, 4045),
                    (4056, 4067),
                    (4071, 4082),
                    (4245, 4247),
                    (4261, 4263),
                    (4274, 4276),
                    (4431, 4433),
                    (4487, 4498),
                    (4567, 4572),
                    (4715, 4717),
                    (4752, 4754),
                    (4769, 4771),
                    (4775, 4777),
                    (4781, 4783),
                    (5241, 5246),
                    (5261, 5266),

                    //10k+
                    (10143, 10145),
                    (10406, 10411),
                    (10415, 10417),
                    (10553, 10558),
                    (10571, 10573)
                ]));

        //      *
        //   * l r *
        // * 0  , 0  *
        //   * l r *
        //      *
        // NAME: PURE VERTICAL
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 0 },
                    { 0, 3 }
                },
                rfgPattern: new[,]
                {
                    { 2, 0 },
                    { 0, 4 }
                },
                ranges: [(741, 744)]));

        //       *
        //    *  0  *
        // * l r , l r *
        //    *  0  *
        //       *
        // NAME: PURE HORIZONTAL
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 3 },
                    { 1, 0 }
                },
                rfgPattern: new[,]
                {
                    { 0, 4 },
                    { 2, 0 }
                },
                ranges:
                [
                    (5346, 5349),
                    (10662, 10669)
                ]));

        //      *
        //   *  0  *
        // * l  ,  r *
        //   * l r *
        //      *
        // NAME: llrr 2x2 (VSHAPE)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0 },
                    { 1, 2 }
                },
                rfgPattern: new[,]
                {
                    { 0, 4 },
                    { 0, 3 }
                },
                ranges:
                [
                    (2131, 2138),
                    (2331, 2378),
                    (2467, 2486),
                    (2910, 2913),
                    (2916, 2919),
                    (2932, 2935),
                    (2938, 2941),
                    (2958, 2961),
                    (2964, 2967),
                    (2980, 2983),
                    (2986, 2989),
                    (3283, 3290),
                    (4300, 4319),
                    (4701, 4708),
                    (4727, 4730),
                    (4741, 4744),
                    (4821, 4836),
                    (5058, 5065),
                    (5237, 5240),
                    (5247, 5254),
                    (5303, 5306),

                    //10k+
                    (10545, 10548),
                    (10559, 10562)
                ]));

        //    *
        // *  l  *
        //    *  l  *
        //       *  l  *
        //          *
        // NAME: lll 3x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0 }
                },
                ranges: [(3813, 3815)]));

        //    *
        // *  l  *
        //    *  l  *
        //       * l r *
        //          *
        // NAME: lllr 3x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 4 }
                },
                ranges:
                [
                    (2139, 2170),
                    (2199, 2234),
                    (2267, 2298),
                    (2379, 2382),
                    (2387, 2390),
                    (2395, 2398),
                    (2403, 2406),
                    (2411, 2438),
                    (2487, 2502),
                    (2744, 2747),
                    (2792, 2795),
                    (2808, 2811),
                    (2818, 2821),
                    (2828, 2831),
                    (2839, 2842),
                    (2844, 2847),
                    (3724, 3731),
                    (3794, 3797),
                    (4149, 4172),
                    (4207, 4210),
                    (4215, 4218),
                    (4348, 4355),
                    (4360, 4363),
                    (4368, 4371),
                    (4376, 4379),
                    (4384, 4387),
                    (4392, 4395),
                    (4400, 4407),
                    (4503, 4506),
                    (4519, 4530),
                    (4555, 4566),
                    (4621, 4624),
                    (4633, 4640),
                    (4645, 4648),
                    (4657, 4664),
                    (4721, 4724),
                    (4755, 4758),
                    (4799, 4810),
                    (4839, 4842),
                    (4865, 4872),
                    (5178, 5197),
                    (5218, 5221),
                    (5273, 5276),

                    //10k+
                    (10198, 10209),
                    (10214, 10217)
                ]));

        //    *
        // *  l  *
        //    *  l  *
        //       * l r *
        //          *
        // NAME: lllr 3x1 (VARIATION)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 5 }
                },
                discards: 1,
                ranges:
                [
                    (2744, 2748),
                    (2792, 2796)
                ]));

        //          *
        //       *  r  *
        //    *  r  *
        // * l r *
        //    *
        // NAME: lrrr 1x3
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 },
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 4 },
                    { 3 },
                    { 2 }
                },
                ranges:
                [
                    (2171, 2198),
                    (2235, 2266),
                    (2299, 2330),
                    (2383, 2386),
                    (2391, 2394),
                    (2399, 2402),
                    (2407, 2410),
                    (2439, 2466),
                    (2503, 2514),
                    (2755, 2758),
                    (2824, 2827),
                    (2834, 2837),
                    (3732, 3747),
                    (4125, 4148),
                    (4203, 4206),
                    (4211, 4214),
                    (4340, 4347),
                    (4356, 4359),
                    (4364, 4367),
                    (4372, 4375),
                    (4380, 4383),
                    (4388, 4391),
                    (4396, 4399),
                    (4499, 4502),
                    (4531, 4554),
                    (4617, 4620),
                    (4625, 4632),
                    (4641, 4644),
                    (4649, 4656),
                    (4759, 4762),
                    (4787, 4798),
                    (4843, 4846),
                    (4857, 4864),
                    (5198, 5217),
                    (5222, 5225),

                    //10k+
                    (10184, 10195),
                    (10218, 10221)
                ]));

        //          *
        //       *  r  *
        //    *  r  *
        // * l r *
        //    *
        // NAME: lrrr 1x3 (VARIATION)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 },
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 5 },
                    { 4 },
                    { 3 }
                },
                discards: 1,
                ranges: [(2754, 2758)]));

        //       *
        //    *  0  *
        // *  l  ,  0  *
        //    *  l  ,  r  *
        //       * l r  *
        //          *
        // NAME: lllrr 3x2 (CHECKMARK)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0 },
                    { 1, 2, 3 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 5 },
                    { 0, 0, 4 }
                },
                ranges:
                [
                    (2585, 2594),
                    (2739, 2743),
                    (2787, 2791),
                    (3134, 3138),
                    (3141, 3145),
                    (3193, 3197),
                    (3200, 3204),
                    (4219, 4228),
                    (4280, 4284),
                    (4290, 4294),
                    (5282, 5291),

                    //10k+
                    (10540, 10544)
                ]));

        //          *
        //       *  0  *
        //    *  0  ,  r  *
        // *  l  ,  r  *
        //    * l r *
        //       *
        // NAME: llrrr 2x3 (REVERSE CHECKMARK)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0 },
                    { 0, 0 },
                    { 1, 2 }
                },
                rfgPattern: new[,]
                {
                    { 0, 5 },
                    { 0, 4 },
                    { 0, 3 }
                },
                ranges:
                [
                    (2575, 2584),
                    (2595, 2604),
                    (2749, 2753),
                    (2797, 2801),
                    (3162, 3166),
                    (3169, 3173),
                    (3222, 3226),
                    (3229, 3233),
                    (4285, 4289),
                    (4295, 4299),
                    (5277, 5281),
                    (5292, 5296),

                    //10k+
                    (10563, 10567)
                ]));

        //          *
        //       *  0  *
        //    * l r ,  l  *
        // *  l  ,  0  *
        //    *  0  *
        //       *
        // NAME: l^lrr 2x3
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 4 },
                    { 2, 0 },
                    { 1, 0 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0 },
                    { 3, 0 },
                    { 0, 0 }
                },
                ranges: [(10549, 10552)]));

        //          *
        //       *  0  *
        //    *  0  ,  0  *
        // *  l  ,  0  ,  r  *
        //    *  l  ,  r  *
        //       * l r *
        //          *
        // NAME: lllrrr 3x3 (VSHAPE+)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0 },
                    { 0, 0, 0 },
                    { 1, 2, 3 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 6 },
                    { 0, 0, 5 },
                    { 0, 0, 4 }
                },
                ranges:
                [
                    (2653, 2670),
                    (3041, 3046),
                    (3236, 3241),
                    (4683, 4700),
                    (4849, 4854),
                    (5066, 5107),
                    (5297, 5302),

                    //10k+
                    (10231, 10236),
                    (10483, 10488),
                    (10496, 10501),
                    (10574, 10579)
                ]));

        //    *
        // *  l  *
        //    *  l  *
        //       *  l  *
        //          *  l  *
        //             *
        // NAME: llll 4x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3, 4 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0 }
                },
                ranges:
                [
                    (3809, 3812),
                    (5342, 5345),
                    (5368, 5371)
                ]));

        //    *
        // *  l  *
        //    *  l  *
        //       *  l  *
        //          * l r *
        //             *
        // NAME: llllr 4x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3, 4 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 5 }
                },
                ranges:
                [
                    (2520, 2544),
                    (2886, 2900),
                    (2902, 2906),
                    (2944, 2948),
                    (2950, 2954),
                    (2992, 2996),
                    (2998, 3002),
                    (3748, 3752),
                    (3759, 3763),
                    (3789, 3793),
                    (4173, 4202),
                    (4731, 4740),

                    //10k+
                    (10632, 10641),
                    (10657, 10661)
                ]));

        //             *
        //          *  r  *
        //       *  r  *
        //    *  r  *
        // * l r *
        //    *
        // NAME: lrrrr 1x4
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 },
                    { 0 },
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 5 },
                    { 4 },
                    { 3 },
                    { 2 }
                },
                ranges:
                [
                    (2550, 2574),
                    (2803, 2807),
                    (2862, 2871),
                    (2921, 2925),
                    (2927, 2931),
                    (2969, 2973),
                    (2975, 2979),
                    (3017, 3021),
                    (3023, 3027),

                    //10k+
                    (10642, 10656)
                ]));

        //             *
        //          *  r  *
        //       *  r  *
        //    *  r  *
        // * l r *
        //    *
        // NAME: lrrrr 1x4 (VARIATION
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 },
                    { 0 },
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 6 },
                    { 5 },
                    { 4 },
                    { 3 }
                },
                discards: 1,
                ranges: [(2802, 2807)]));

        //             *
        //          *  r  *
        //       *  r  *
        //    *  r  *
        // *  r  *
        //    *
        // NAME: rrrr 1x4
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 }
                },
                rfgPattern: new[,]
                {
                    { 4 },
                    { 3 },
                    { 2 },
                    { 1 }
                },
                ranges:
                [
                    (5338, 5341),
                    (5364, 5367)
                ]));

        //       *
        //    *  l  *
        // *  0  ,  l  *
        //    *  0  ,  0  *
        //       *  r  , l r *
        //          *  0  *
        //             *
        // NAME: lll r lr 4x2
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 0, 4 },
                    { 0, 0, 0, 0 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 5 },
                    { 0, 0, 3, 0 }
                },
                ranges: [(2515, 2519)]));

        //       *
        //    *  0  *
        // * l r ,  0  *
        //    *  0  ,  0  *
        //       * l r , l r *
        //          *  0  *
        //             *
        // NAME: lr lr lr 4x2
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 5 },
                    { 1, 0, 3, 0 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 6 },
                    { 2, 0, 4, 0 }
                },
                ranges: [(10696, 10701)]));

        //             *
        //          *  r  *
        //       *  r  ,  0  *
        //    *  0  ,  0  *
        // * l r ,  l  *
        //    *  0  *
        //       *
        // NAME: lr l rr 2x4
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0 },
                    { 0, 0 },
                    { 0, 3 },
                    { 1, 0 }
                },
                rfgPattern: new[,]
                {
                    { 5, 0 },
                    { 4, 0 },
                    { 0, 0 },
                    { 2, 0 }
                },
                ranges: [(2545, 2549)]));

        //             *
        //          *  r  *
        //       *  r  ,  0  *
        //    *  0  ,  0  *
        // * l r ,  l  *
        //    *  0  *
        //       *
        // NAME: lr lrrr 2x4
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0 },
                    { 0, 0 },
                    { 0, 3 },
                    { 1, 0 }
                },
                rfgPattern: new[,]
                {
                    { 0, 6 },
                    { 0, 5 },
                    { 0, 4 },
                    { 2, 0 }
                },
                ranges: [(10580, 10585)]));

        //       *
        //    *  0  *
        // *  l  ,  0  *
        //    *  l  ,  0  *
        //       *  l  ,  r  *
        //          * l r *
        //             *
        // NAME: llllrr 4x2 (CHECKMARK+)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0 },
                    { 1, 2, 3, 4 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 6 },
                    { 0, 0, 0, 5 }
                },
                ranges:
                [
                    (2605, 2628),
                    (3004, 3015),
                    (3073, 3078),
                    (3080, 3085)
                ]));

        //             *
        //          *  0  *
        //       *  0  ,  r  *
        //    *  0  ,  r  *
        // *  l  ,  r  *
        //    * l r *
        //       *
        // NAME: llrrrr 2x4 (REVERSE CHECKMARK+)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0 },
                    { 0, 0 },
                    { 0, 0 },
                    { 1, 2 }
                },
                rfgPattern: new[,]
                {
                    { 0, 6 },
                    { 0, 5 },
                    { 0, 4 },
                    { 0, 3 }
                },
                ranges:
                [
                    (2629, 2652),
                    (3028, 3039),
                    (3102, 3107),
                    (3109, 3114)
                ]));

        //             *
        //          *  0  *
        //       *  0  ,  0  *
        //    *  0  ,  0  ,  r  *
        // *  l  ,  0  ,  r  *
        //    *  l  ,  r  *
        //       * l r *
        //          *
        // NAME: lllrrrr 3x4
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0 },
                    { 0, 0, 0 },
                    { 0, 0, 0 },
                    { 1, 2, 3 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 7 },
                    { 0, 0, 6 },
                    { 0, 0, 5 },
                    { 0, 0, 4 }
                },
                ranges:
                [
                    (4576, 4582),
                    (5115, 5121)
                ]));

        //          * 
        //       *  0  *
        //    *  0  ,  0  *
        // *  l  ,  0  ,  0  *
        //    *  l  ,  0  ,  r  *
        //       *  l  ,  r  *
        //          * l r *
        //             *
        // NAME: llllrrr 4x3
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 1, 2, 3, 4 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 7 },
                    { 0, 0, 0, 6 },
                    { 0, 0, 0, 5 }
                },
                ranges:
                [
                    (5108, 5114),
                    (5122, 5177),

                    //10k+
                    (10489, 10495)
                ]));

        //             *
        //          *  0  *
        //       *  0  ,  0  *
        //    *  0  ,  0  ,  0  *
        // *  l  ,  0  ,  0  ,  r  *
        //    *  l  ,  0  ,  r  *
        //       *  l  ,  r  *
        //          * l r *
        //             *
        // NAME: llllrrrr 4x4 (VSHAPE++)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 1, 2, 3, 4 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 8 },
                    { 0, 0, 0, 7 },
                    { 0, 0, 0, 6 },
                    { 0, 0, 0, 5 }
                },
                ranges:
                [
                    (3048, 3055),
                    (5307, 5314),

                    //10k+
                    (10237, 10252)
                ]));

        //             *
        //          *  0  *
        //       *  0  ,  0  *
        //    *  0  ,  0  ,  0  *
        // *  r  ,  0  ,  0  ,  0  *
        //    *  r  ,  0  , l r *
        //       *  r  ,  l  *
        //          *  0  *
        //             *
        // NAME: rrr ll r 4x4
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 4 },
                    { 0, 0, 0, 3 },
                    { 0, 0, 0, 0 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 5 },
                    { 0, 0, 0, 0 },
                    { 6, 1, 2, 0 }
                },
                ranges: [(3716, 3721)]));

        //    *
        // *  l  *
        //    *  l  *
        //       *  l  *
        //          *  l  *
        //             *  l  *
        //                *
        // NAME: lllllr 5x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3, 4, 5 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0 }
                },
                ranges: [(3770, 3774)]));

        //    *
        // *  l  *
        //    *  l  *
        //       *  l  *
        //          *  l  *
        //             * l r *
        //                *
        // NAME: lllllr 5x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3, 4, 5 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 6 }
                },
                ranges:
                [
                    (2725, 2730),
                    (2732, 2737),
                    (2759, 2764),
                    (2766, 2771),
                    (3291, 3302),
                    (3753, 3758)
                ]));

        //          *
        //       *  0  *
        //    *  l  ,  0  *
        // *  0  ,  0  ,  0  *
        //    *  0  ,  0  ,  0  *
        //       *  l  ,  0  ,  l  *
        //          *  l  ,  0  *
        //             * l r *
        //                *
        // NAME: lllllr 5x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 6 },
                    { 1, 0, 0, 0, 0 },
                    { 0, 0, 2, 3, 4 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 5 }
                },
                ranges: [(10586, 10591)]));

        //                *
        //             *  r  *
        //          *  r  *
        //       *  r  *
        //    *  r  *
        // * l r *
        //    *
        // NAME: lrrrrr 1x5
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 },
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 6 },
                    { 5 },
                    { 4 },
                    { 3 },
                    { 2 }
                },
                ranges:
                [
                    (2699, 2710),
                    (2712, 2717),
                    (2719, 2724),
                    (2774, 2779),
                    (2781, 2786),
                    (2812, 2817),
                    (4507, 4518)
                ]));

        //                *
        //             *  0  *
        //          *  0  ,  r  *
        //       *  0  ,  r  *
        //    *  0  ,  r  *
        // *  l  ,  r  *
        //    * l r *
        //       *
        // NAME: llrrrrr 2x5 (REVERSE CHECKMARK++)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0 },
                    { 0, 0 },
                    { 0, 0 },
                    { 0, 0 },
                    { 1, 2 }
                },
                rfgPattern: new[,]
                {
                    { 0, 7 },
                    { 0, 6 },
                    { 0, 5 },
                    { 0, 4 },
                    { 0, 3 }
                },
                ranges: [(4408, 4414)]));

        //                *
        //             *  0  *
        //          *  0  ,  0  *
        //       *  0  ,  0  ,  r  *
        //    *  0  ,  0  ,  r  *
        // *  l  ,  0  ,  r  *
        //    *  l  ,  r  *
        //       * l r *
        //          *
        // NAME: lllrrrrr 3x5
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0 },
                    { 0, 0, 0 },
                    { 0, 0, 0 },
                    { 0, 0, 0 },
                    { 1, 2, 3 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 8 },
                    { 0, 0, 7 },
                    { 0, 0, 6 },
                    { 0, 0, 5 },
                    { 0, 0, 4 }
                },
                ranges:
                [
                    //10k+
                    (10059, 10066)
                ]));

        //                *
        //             *  0  *
        //          *  0  ,  0  *
        //       *  0  ,  0  ,  0  *
        //    *  0  ,  0  ,  0  ,  r  *
        // *  l  ,  0  ,  0  ,  r  *
        //    *  l  ,  0  ,  r  *
        //       *  l  ,  r  *
        //          * l r *
        //             *
        // NAME: llllrrrrr 4x5
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 1, 2, 3, 4 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 9 },
                    { 0, 0, 0, 8 },
                    { 0, 0, 0, 7 },
                    { 0, 0, 0, 6 },
                    { 0, 0, 0, 5 }
                },
                ranges:
                [
                    //10k+
                    (10076, 10084),
                    (10094, 10102),
                    (10531, 10539)
                ]));

        //             *
        //          *  0  *
        //       *  0  ,  0   *
        //    *  0  ,  0  ,  0  *
        // *  l  ,  0  ,  0  ,  0  *
        //    *  l  ,  0  ,  0  ,  r  *
        //       *  l  ,  0  ,  r  *
        //          *  l  ,  r  *
        //             * l r *
        //                *
        // NAME: lllllrrrr 5x4
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0 },
                    { 1, 2, 3, 4, 5 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 9 },
                    { 0, 0, 0, 0, 8 },
                    { 0, 0, 0, 0, 7 },
                    { 0, 0, 0, 0, 6 }
                },
                ranges:
                [
                    (5315, 5323),

                    //10k+
                    (10067, 10075),
                    (10085, 10093),
                    (10620, 10628)
                ]));

        //                *
        //             *  0  *
        //          *  0  ,  0  *
        //       *  0  ,  0  ,  0  *
        //    *  0  ,  0  ,  0  ,  0  *
        // *  l  ,  0  ,  0  ,  0  ,  r  *
        //    *  l  ,  0  ,  0  ,  r  *
        //       *  l  ,  0  ,  r  *
        //          *  l  ,  r  *
        //             * l r *
        //                *
        // NAME: lllllrrrrr 5x5 (VSHAPE+++)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0 },
                    { 1, 2, 3, 4, 5 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 10 },
                    { 0, 0, 0, 0, 9 },
                    { 0, 0, 0, 0, 8 },
                    { 0, 0, 0, 0, 7 },
                    { 0, 0, 0, 0, 6 }
                },
                ranges:
                [
                    (4443, 4452),

                    //10k+
                    (10521, 10530)
                ]));

        //    *
        // *  l  *
        //    *  l  *
        //       *  l  *
        //          *  l  *
        //             *  l  *
        //                *  l  *
        //                   *
        // NAME: llllll 6x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3, 4, 5, 6 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0 }
                },
                ranges:
                [
                    (3764, 3769),
                    (3775, 3780)
                ]));

        //    *
        // *  l  *
        //    *  l  *
        //       *  l  *
        //          *  l  *
        //             *  l  *
        //                * l r *
        //                   *
        // NAME: llllllr 6x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3, 4, 5, 6 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 7 }
                },
                ranges:
                [
                    (2685, 2698),
                    (2872, 2885),

                    //10k+
                    (10154, 10160)
                ]));

        //                   *
        //                *  r  *
        //             *  r  *
        //          *  r  *
        //       *  r  *
        //    *  r  *
        // * l r *
        //    *
        // NAME: lrrrrrr 1x6
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 },
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 7 },
                    { 6 },
                    { 5 },
                    { 4 },
                    { 3 },
                    { 2 }
                },
                ranges:
                [
                    (2671, 2684),
                    (2848, 2861),

                    //10k+
                    (10161, 10167)
                ]));

        //       *
        //    *  0  *
        // *  l  ,  0  *
        //    *  l  ,  0  *
        //       *  l  ,  0  *
        //          *  l  ,  0  *
        //             *  l  ,  r  *
        //                * l r *
        //                   *
        // NAME: llllllrr 6x2 (CHECKMARK+++)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0 },
                    { 1, 2, 3, 4, 5, 6 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 8 },
                    { 0, 0, 0, 0, 0, 7 }
                },
                ranges:
                [
                    (3056, 3071),
                    (3116, 3131),
                    (3176, 3191)
                ]));

        //                   *
        //                *  0  *
        //             *  0  ,  r  *
        //          *  0  ,  r  *
        //       *  0  ,  r  *
        //    *  0  ,  r  *
        // *  l  ,  r  *
        //    * l r *
        //       *
        // NAME: llrrrrrr 2x6 (REVERSE CHECKMARK+++)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0 },
                    { 0, 0 },
                    { 0, 0 },
                    { 0, 0 },
                    { 0, 0 },
                    { 1, 2 }
                },
                rfgPattern: new[,]
                {
                    { 0, 8 },
                    { 0, 7 },
                    { 0, 6 },
                    { 0, 5 },
                    { 0, 4 },
                    { 0, 3 }
                },
                ranges:
                [
                    (3086, 3101),
                    (3146, 3161),
                    (3206, 3221)
                ]));

        //                *
        //             *  0  *
        //          *  0  ,  0  *
        //       *  0  ,  0  ,  0  *
        //    *  0  ,  0  ,  0  ,  r  *
        // *  l  ,  0  ,  0  ,  r  *
        //    *  l  ,  0  ,  r  *
        //       * l r , l r  *
        //          *  0  *
        //             *
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 5 },
                    { 1, 2, 3, 0 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 9 },
                    { 0, 0, 0, 8 },
                    { 0, 0, 0, 7 },
                    { 0, 0, 0, 6 },
                    { 0, 0, 4, 0 }
                },
                ranges:
                [
                    //10k+
                    (10222, 10230)
                ]));

        //             *
        //          *  0  *
        //       *  0  ,  0  *
        //    *  0  ,  0  ,  0  *
        // * l r , l r , l r ,  l  *
        //    *  0  ,  0  ,  0  *
        //       *  0  ,  0  *
        //          *  0  *
        //             *
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 7 },
                    { 0, 0, 5, 0 },
                    { 0, 3, 0, 0 },
                    { 1, 0, 0, 0 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0 },
                    { 0, 0, 6, 0 },
                    { 0, 4, 0, 0 },
                    { 2, 0, 0, 0 }
                },
                ranges:
                [
                    //10k+
                    (24245, 24307)
                ]));

        //       *
        //    *  0  *
        // *  l  ,  0  *
        //    *  l  ,  0  *
        //       *  l  ,  0  *
        //          *  l  ,  0  *
        //             *  l  ,  0  *
        //                *  l  *  l  *
        //                   *  l  *
        //                      *
        // NAME: lllllll l 7x2
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 8 },
                    { 1, 2, 3, 4, 5, 6, 7 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 }
                },
                ranges:
                [
                    (10688, 10695)

                    //more
                ]));

        //    * 
        // *  l  *
        //    *  l  *
        //       *  l  *
        //          *  l  *
        //             *  l  *
        //                *  l  *
        //                   *  l  *
        //                      * l r *
        //                         *
        // NAME: llllllllr 8x1
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 1, 2, 3, 4, 5, 6, 7, 8 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 0, 9 }
                },
                ranges: [(10502, 10510)]));

        //                            *
        //                         *  r  *
        //                      *  r  *
        //                   *  r  *
        //                *  r  *
        //             *  r  *
        //          *  r  *
        //       *  r  *
        //    *  r  *
        // * l r *
        //    *
        // NAME: lrrrrrrrrr 1x9
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 },
                    { 0 },
                    { 1 }
                },
                rfgPattern: new[,]
                {
                    { 10 },
                    { 9 },
                    { 8 },
                    { 7 },
                    { 6 },
                    { 5 },
                    { 4 },
                    { 3 },
                    { 2 }
                },
                ranges: [(10511, 10520)]));

        //                *
        //             *  0  *
        //          *  0  ,  0  *
        //       *  0  ,  0  ,  0  *
        //    *  0  ,  0  ,  0  ,  0  *
        // *  l  ,  0  ,  0  ,  0  ,  0  *
        //    *  l  ,  0  ,  0  ,  0  ,  0  *
        //       *  l  ,  0  ,  0  ,  0  ,  0  *
        //          *  l  ,  0  ,  0  ,  0  ,  0  *
        //             *  l  ,  0  ,  0  ,  0  ,  r  *
        //                *  l  ,  0  ,  0  ,  r  *
        //                   *  l  ,  0  ,  r  *
        //                      *  l  ,  r  *
        //                         * l r *
        //                            *
        // NAME: llllllrr 6x2 (CHECKMARK+++++)
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                    { 1, 2, 3, 4, 5, 6, 7, 8, 9 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 0, 0, 14 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 13 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 12 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 11 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 10 }
                },
                ranges: [(4453, 4466)]));

        //                      *
        //                   *  0  *
        //                *  0  ,  0  *
        //             *  0  ,  0  ,  0  *
        //          *  0  ,  0  ,  0  ,  0  *
        //       *  0  ,  0  ,  0  ,  0  ,  0  *
        //    *  l  ,  0  ,  0  ,  0  ,  0  ,  0  *
        // *  0  ,  l  ,  0  ,  0  ,  0  , l r , l r *
        //    *  0  ,  0  ,  0  ,  0  ,  0  ,  0  *
        //       *  0  ,  0  ,  0  ,  r  ,  0  *
        //          *  l  ,  0  ,  r  ,  0  *
        //             *  l  ,  0  ,  0  *
        //                *  l  ,  0  *
        //                   * l r *
        //                      *  
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 12 },
                    { 0, 0, 0, 0, 0, 10, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 1, 2, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 3, 4, 5, 6 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 13 },
                    { 0, 0, 0, 0, 0, 11, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 9, 0 },
                    { 0, 0, 0, 0, 0, 8, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 7 }
                },
                ranges: [(10592, 10604)]));

        //                *
        //             *  0  *
        //          *  0  ,  0  *
        //       *  l  ,  0  ,  0  *
        //    *  0  ,  0  ,  0  ,  0  *
        // *  0  ,  0  ,  0  ,  0  ,  0  *
        //    *  0  ,  l  ,  0  ,  0  ,  0  *
        //       *  0  ,  l  ,  0  ,  0  ,  0  *
        //          *  0  ,  0  ,  0  ,  0  ,  0  *
        //             *  0  ,  0  ,  0  ,  0  ,  0  *
        //                * l r , l r ,  0  ,  0  ,  0  *
        //                   *  0  ,  0  ,  0  ,  0  ,  0  *
        //                      *  0  ,  0  ,  0  ,  0  ,  0  *
        //                         *  0  ,  0  ,  0  ,  0  ,  0  *
        //                            *  l  ,  0  ,  0  ,  0  ,  r  *
        //                               *  l  ,  0  ,  0  ,  r  *
        //                                  *  l  ,  0  ,  r  *
        //                                     *  l  ,  r  *
        //                                        * l r *
        //                                           *
        fgStructures.AddRange(
            CreateFromPattern(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                    { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 2, 3, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 9, 10, 11, 12 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16 },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15 },
                    { 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 14 },
                    { 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 13 }
                },
                ranges: [(5478, 5494)]));
        #endregion

        #region Background Structures
        //BACKGROUND STRUCTURES
        var bgStructures = new List<StructureViewModel>();

        bgStructures.AddRange(
            CreateFromPattern(
                new[,]
                {
                    { 1, 2 },
                    { 3, 4 }
                },
                ranges:
                [
                    (269, 276),
                    (305, 312)
                ]));

        bgStructures.AddRange(
            CreateFromPattern(
                new[,]
                {
                    { 1, 2, 3 },
                    { 4, 5, 6 },
                    { 7, 8, 9 }
                },
                ranges: [(313, 321)]));

        //                      *
        //                   *  0  *
        //                *  0  ,  0  *
        //             *  0  ,  0  ,  0  *
        //          *  0  ,  0  ,  0  ,  0  *
        //       *  0  ,  0  ,  0  ,  0  ,  0  *
        //    *  l  ,  0  ,  0  ,  0  ,  0  ,  0  *
        // *  0  ,  l  ,  0  ,  0  ,  0  , l r , l r *
        //    *  0  ,  0  ,  0  ,  0  ,  0  ,  0  *
        //       *  0  ,  0  ,  0  ,  r  ,  0  *
        //          *  l  ,  0  ,  r  ,  0  *
        //             *  l  ,  0  ,  0  *
        //                *  l  ,  0  *
        //                   * l r *
        //                      *  
        fgStructures.AddRange(
            CreateFromPatternCustom(
                lfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 12 },
                    { 0, 0, 0, 0, 0, 10, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 1, 2, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 3, 4, 5, 6 }
                },
                rfgPattern: new[,]
                {
                    { 0, 0, 0, 0, 0, 0, 13 },
                    { 0, 0, 0, 0, 0, 11, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 9, 0 },
                    { 0, 0, 0, 0, 0, 8, 0 },
                    { 0, 0, 0, 0, 0, 0, 0 },
                    { 0, 0, 0, 0, 0, 0, 7 }
                },
                indexes:
                [
                    10592,
                    10593,
                    10594,
                    10595,
                    10596,
                    10597,
                    10598,

                    //begin custom
                    10629,
                    10630,
                    10631,

                    //end custom

                    10602,
                    10603,
                    10604
                ]));
        #endregion

        // (,),

        FOREGROUND_STRUCTURES =
        [
            ..fgStructures.OrderBy(
                structure =>
                {
                    var minTileId = int.MaxValue;

                    if (structure.HasBackgroundTiles)
                    {
                        var tileIds = structure.RawBackgroundTiles
                                               .Select(tile => tile.TileId)
                                               .Where(tileId => tileId != 0)
                                               .ToList();

                        if (tileIds.Count > 0)
                            minTileId = Math.Min(
                                minTileId,
                                tileIds.Min());
                    }

                    if (structure.HasLeftForegroundTiles)
                    {
                        var tileIds = structure.RawLeftForegroundTiles
                                               .Select(tile => tile.TileId)
                                               .Where(tileId => tileId != 0)
                                               .ToList();

                        if (tileIds.Count > 0)
                            minTileId = Math.Min(
                                minTileId,
                                tileIds.Min());
                    }

                    if (structure.HasRightForegroundTiles)
                    {
                        var tileIds = structure.RawRightForegroundTiles
                                               .Select(tile => tile.TileId)
                                               .Where(tileId => tileId != 0)
                                               .ToList();

                        if (tileIds.Count > 0)
                            minTileId = Math.Min(
                                minTileId,
                                tileIds.Min());
                    }

                    return minTileId;
                })
        ];

        BACKGROUND_STRUCTURES =
        [
            ..bgStructures.OrderBy(
                structure =>
                {
                    var minTileId = int.MaxValue;

                    if (structure.HasBackgroundTiles)
                    {
                        var tileIds = structure.RawBackgroundTiles
                                               .Select(tile => tile.TileId)
                                               .Where(tileId => tileId != 0)
                                               .ToList();

                        if (tileIds.Count > 0)
                            minTileId = Math.Min(
                                minTileId,
                                tileIds.Min());
                    }

                    if (structure.HasLeftForegroundTiles)
                    {
                        var tileIds = structure.RawLeftForegroundTiles
                                               .Select(tile => tile.TileId)
                                               .Where(tileId => tileId != 0)
                                               .ToList();

                        if (tileIds.Count > 0)
                            minTileId = Math.Min(
                                minTileId,
                                tileIds.Min());
                    }

                    if (structure.HasRightForegroundTiles)
                    {
                        var tileIds = structure.RawRightForegroundTiles
                                               .Select(tile => tile.TileId)
                                               .Where(tileId => tileId != 0)
                                               .ToList();

                        if (tileIds.Count > 0)
                            minTileId = Math.Min(
                                minTileId,
                                tileIds.Min());
                    }

                    return minTileId;
                })
        ];

        // @formatter:keep_existing_initializer_arrangement restore
        // @formatter:wrap_arguments_style restore
    }

    /// <summary>
    ///     Creates a collection of <see cref="StructureViewModel" /> instances from the specified pattern.
    /// </summary>
    /// <param name="bgPattern">
    ///     The background tile pattern to fill in
    /// </param>
    /// <param name="lfgPattern">
    ///     The left foreground tile pattern to fill in
    /// </param>
    /// <param name="rfgPattern">
    ///     The right foreground tile pattern to fill in
    /// </param>
    /// <param name="discards">
    ///     Extra tiles to include in the chunk that are not actually used in the pattern
    /// </param>
    /// <param name="ranges">
    ///     The ranges to fill in the patterns with
    /// </param>
    /// <remarks>
    ///     The patterns are 2D array where each element contains a number that corresponds to the order the tiles should be
    ///     placed in
    ///     <br />
    ///     <br />
    ///     The number zero means there is no tile at that position
    ///     <br />
    ///     Rows are rows, Columns are columns [y, x]... the array will be rotated when it is interpreted into data so that it
    ///     matches up with [x, y]
    /// </remarks>
    private static IEnumerable<StructureViewModel> CreateFromPattern(
        int[,]? bgPattern = null,
        int[,]? lfgPattern = null,
        int[,]? rfgPattern = null,
        int discards = 0,
        params IEnumerable<(int start, int end)> ranges)
    {
        var bgcount = bgPattern?.Flatten()
                               .Count(num => num != 0)
                      ?? 0;

        var lfgCount = lfgPattern?.Flatten()
                                 .Count(num => num != 0)
                       ?? 0;

        var rfgCount = rfgPattern?.Flatten()
                                 .Count(num => num != 0)
                       ?? 0;

        var totalCountPerPattern = bgcount + lfgCount + rfgCount + discards;
        var width = Math.Max(bgPattern?.GetLength(1) ?? 0, Math.Max(lfgPattern?.GetLength(1) ?? 0, rfgPattern?.GetLength(1) ?? 0));
        var height = Math.Max(bgPattern?.GetLength(0) ?? 0, Math.Max(lfgPattern?.GetLength(0) ?? 0, rfgPattern?.GetLength(0) ?? 0));

        foreach (var range in ranges)
        {
            var indexChunks = Enumerable.Range(range.start, range.end - range.start + 1)
                                        .Chunk(totalCountPerPattern);

            foreach (var chunk in indexChunks)
            {
                var bgData = new int[width, height];
                var lfgData = new int[width, height];
                var rfgData = new int[width, height];

                for (var y = 0; y < height; y++)
                {
                    for (var x = 0; x < width; x++)
                    {
                        if (bgPattern is not null)
                        {
                            var num = bgPattern[y, x];

                            if (num != 0)

                                // ReSharper disable once ConditionIsAlwaysTrueOrFalse
                                bgData[x, y] = num == 0 ? 0 : chunk[num - 1];
                        }

                        if (lfgPattern is not null)
                        {
                            var num = lfgPattern[y, x];

                            if (num != 0)

                                // ReSharper disable once ConditionIsAlwaysTrueOrFalse
                                lfgData[x, y] = num == 0 ? 0 : chunk[num - 1];
                        }

                        if (rfgPattern is not null)
                        {
                            var num = rfgPattern[y, x];

                            if (num != 0)

                                // ReSharper disable once ConditionIsAlwaysTrueOrFalse
                                rfgData[x, y] = num == 0 ? 0 : chunk[num - 1];
                        }
                    }
                }

                yield return StructureViewModel.Create(
                    bgPattern is not null ? bgData : null,
                    lfgPattern is not null ? lfgData : null,
                    rfgPattern is not null ? rfgData : null);
            }
        }
    }

    /// <summary>
    ///     Creates a collection of <see cref="StructureViewModel" /> instances from the specified pattern.
    /// </summary>
    /// <param name="bgPattern">
    ///     The background tile pattern to fill in
    /// </param>
    /// <param name="lfgPattern">
    ///     The left foreground tile pattern to fill in
    /// </param>
    /// <param name="rfgPattern">
    ///     The right foreground tile pattern to fill in
    /// </param>
    /// <param name="indexes">
    ///     Tile indexes to use in the pattern
    /// </param>
    /// <remarks>
    ///     The patterns are 2D array where each element contains a number that corresponds to the order the tiles should be
    ///     placed in
    ///     <br />
    ///     <br />
    ///     The number zero means there is no tile at that position
    ///     <br />
    ///     Rows are rows, Columns are columns [y, x]... the array will be rotated when it is interpreted into data so that it
    ///     matches up with [x, y]
    /// </remarks>
    private static IEnumerable<StructureViewModel> CreateFromPatternCustom(
        int[,]? bgPattern = null,
        int[,]? lfgPattern = null,
        int[,]? rfgPattern = null,
        params IEnumerable<int> indexes)
    {
        var bgcount = bgPattern?.Flatten()
                               .Count(num => num != 0)
                      ?? 0;

        var lfgCount = lfgPattern?.Flatten()
                                 .Count(num => num != 0)
                       ?? 0;

        var rfgCount = rfgPattern?.Flatten()
                                 .Count(num => num != 0)
                       ?? 0;

        var totalCountPerPattern = bgcount + lfgCount + rfgCount;
        var width = Math.Max(bgPattern?.GetLength(1) ?? 0, Math.Max(lfgPattern?.GetLength(1) ?? 0, rfgPattern?.GetLength(1) ?? 0));
        var height = Math.Max(bgPattern?.GetLength(0) ?? 0, Math.Max(lfgPattern?.GetLength(0) ?? 0, rfgPattern?.GetLength(0) ?? 0));

        var bgData = new int[width, height];
        var lfgData = new int[width, height];
        var rfgData = new int[width, height];
        var chunk = indexes.ToList();

        for (var y = 0; y < height; y++)
        {
            for (var x = 0; x < width; x++)
            {
                if (bgPattern is not null)
                {
                    var num = bgPattern[y, x];

                    if (num != 0)

                        // ReSharper disable once ConditionIsAlwaysTrueOrFalse
                        bgData[x, y] = num == 0 ? 0 : chunk[num - 1];
                }

                if (lfgPattern is not null)
                {
                    var num = lfgPattern[y, x];

                    if (num != 0)

                        // ReSharper disable once ConditionIsAlwaysTrueOrFalse
                        lfgData[x, y] = num == 0 ? 0 : chunk[num - 1];
                }

                if (rfgPattern is not null)
                {
                    var num = rfgPattern[y, x];

                    if (num != 0)

                        // ReSharper disable once ConditionIsAlwaysTrueOrFalse
                        rfgData[x, y] = num == 0 ? 0 : chunk[num - 1];
                }
            }
        }

        yield return StructureViewModel.Create(
            bgPattern is not null ? bgData : null,
            lfgPattern is not null ? lfgData : null,
            rfgPattern is not null ? rfgData : null);
    }
}